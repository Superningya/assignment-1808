
v-on 事件绑定指令 简写 @
v-bind 属性绑定指令 简写 :

v-model  =>   :value="value" @input='input'
 
v-for里  数组索引是第二个参数，对象索引是第三个参数

数组更新
    Vue.set(vm.items, indexOfItem, newValue);
    vm.$set(vm.items, indexOfItem, newValue);
    vm.items.splice(indexOfItem, 1, newValue)
对象更新
    Vue.set(vm.obj, key, newValue)；
    Object.assign({}, vm.obj, newObj);

---------------
v-for和v-if同时出现是，v-for的优先级大于v-if
如果需要v-if来处理v-for的话，需要把v-if写在外层


--vue指令修饰符--
    理解事件捕获、事件冒泡、事件委托
    .stop <=> StopPropagation  .prevent =>preventDetault .capture .self .once  .passive
    v-model  .number .lazy .trim
    v-on:keyup.13
       

--computed--
计算属性缓存vs方法
    计算属性是基于它们的响应式依赖进行缓存的只在相关响应式依赖发生改变时它们才会重新求值。相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。
计算属性的setter
    两个钩子函数 get(),set()   set定义一个参数是set值

--watch--
    回调参数（newValue，oldValue）
    监听对象、数组，handle、deep参数
    监听对象属性 对象键路径必须加上引号（’obj.name’）
    通过实例方法$watch 来监听数据   vm.$watch('数据',function(){})

--filter--
   管道符：|
   过滤器定义：
	全局定义：Vue.filter('过滤器名字'，function（）｛｝)
	局部定义：filters｛'过滤器名字'：function（）｛｝｝
    过滤器的第一个参数是，要过滤的值
    过滤器的第二个参数是，过滤器的第一个参数,以此类推
    可以用在双花括号插值和 v-bind 表达式
    过滤器 可以链式调用
    过滤器参数： data | filterA (arg1,arg2)
    过滤器更像是‘一对多’的计算熟悉 vs 计算属性 一对一
    vue1.X的内置过滤器：（了解，2.x版本已经移除这些过滤器），
	Capitalize、uppercase、lowercase、currency、pluralize、debounce、limitBy、filterBy、orderBy


--自定义指令--
    全局注册/局部注册
    Vue.directive(‘focus’, {钩子函数})
    directives: { focus: {钩子函数}}
    Directive
    钩子函数
        bind;inserted;update;componentUpdated;unbind
    钩子函数参数
        el;binding(name、value、oldValue、expression、arg、modifiers);vnode;oldVnode
    钩子函数简写（bind+update）

--生命周期--
beforeCreate
	数据还没有监听，没有绑定到vue对象实例，同时也没有挂载对象
created
	数据已经绑定到了对象实例，但是还没有挂载对象
beforeMount
	模板已经编译好了，根据数据和模板已经生成了对应的元素对象，将数据对象关联到了对象的 $el属性，$el属性是一个HTMLElement对象，也就是这个阶段，vue实例通过原生的createElement等方法来创建这个html片段，准备注入到我们vue实例指明的el属性所对应的挂载点
Mounted
	将$el的内容挂载到了el，相当于我们在jquery执行了$(el).html($el),生成页面上真正的dom，上面我们就会发现dom的元素和我们$el的元素是一致的。在此之后，我们能够用方法来获取到el元素下的dom对象，并进 行各种操作
beforeUpdate
	数据更新到dom之前，我们可以看到$el对象已经修改，但是我们页面上dom的数据还没有发生改变
Updated
	dom结构会通过虚拟dom的原则，找到需要更新页面dom结构的最小路径，将改变更新到dom上面，完成更新
beforeDestroy
Destroyed
	实例的销毁，vue实例还是存在的，只是解绑了事件的监听还有watcher对象数据与view的绑定，即数据驱动
Activated/deactivated   组件激活、停用

--组件基础--
1、组件是可复用的 Vue 实例，且带有一个名字，（所以它接收相同的选项）
2、全局注册和局部注册
3、data必须是一个函数，（返回独立拷贝对象，避免指向同一个data影响其他实例）
4、向子组件传值，prop  （对象）
5、组件模板必须是单个根元素，DOM模板
	1、template，写在选项里
	2、<template>标签的模版	
	3、<script type="x-template">标签里的模版（不推荐）
6、父组件通过 v-on 监听子组件实例的任意自定义事件，来接受信息。
7、$emit(arg1，arg2)，第一个参数：事件名，第二个参数：传递的事件参数,用$event来接受，或者方法的第一个参数
8、组件上使用 v-model （:value + @input）;
9、使用组件名（字母全小写且必须包含一个连字符），避免冲突
    定义组件名，kebab-case或者PascalCase，但是使用时只有 kebab-case 是有效的
10、prop命名：kebab-case或者PascalCase 使用：kebab-case（同组件名规则）


1、Prop验证
	type：String、Number、Boolean、Function、Object、Array、Date、Symbol、自定义的构造函数
	required：true/false
	default: 默认值，数组/对象的默认值应当由一个工厂函数返回
	validator：自定义验证函数
2、动态绑定特性值
	1、引用类型时，子组件中更改相应的属性会导致父组件相应属性的更改
	2、基本类型时，子组件中更改这个属性会报错，加上.sync修饰符
但是：一般来说，是不建议在子组件中对父组件中传递来的属性进行操作的
	1、基本类型值，在子组件中创建一个新的data或computed，并以传递进来的值进行初始化，之后就可以操作这个新的属性了
	2、引用类型值，最好是对引用类型进行复制。复杂的情况，肯定应该是深复制

3、非prop类型的属性/覆盖非prop类型的属性，class、style除外。禁用特性inheritAttrs: false


---过渡、动画---
1、单元素、动态组件过渡 <transition>
2、过渡类名（过渡、动画）
3、钩子函数（参数）
4、appear属性
5、多个元素过渡必须要绑定key，过渡模式（mode out-in in-out）

6、列表过渡<transition-group> 、 key（必须） tag属性（默认span）
7、动态过渡 :name
8、v-move






